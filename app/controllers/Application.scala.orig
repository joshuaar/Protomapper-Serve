package controllers 
import scala.concurrent.ExecutionContext.Implicits.global
import com.protomapper.compile._
import com.protomapper.update._
import com.protomapper.search._
import org.biojava3.core.sequence.ProteinSequence
import org.apache.lucene.store.NIOFSDirectory
import java.io.File
import play.api._
import play.api.mvc._
import play.api.libs.iteratee.Enumerator

object Application extends Controller {
  val parser = new PatternParser
  val compiler = new PatternCompiler(parser,3)
  val ix = new NIOFSDirectory(new File("/root/lucene4"))
  val access = new LuceneAccess(ix)
  val search = new Searcher(compiler,access)
  def index = Action {
    Ok(views.html.index("Protomapper ready"))
  }
  
  def query(q:String,r:String) = Action {
    val range = r.split("%")
    val from = range(0)
    val to = range(1)
    val res = search.search(q)
    val out = res.getJSON(from.toInt, to.toInt)
    Ok(out)
  }
  
<<<<<<< HEAD
  def download(q:String) = Action {
    val res = search.search(q)
    val (data,reader) = res.getFastaStream()
    val dataBytes = data.view.map(a=>a.getBytes()).toIterator
    class ClosableIterator extends Iterator[Array[Byte]]{
        def hasNext():Boolean = {
            val ret = dataBytes.hasNext
            if(!ret)
                reader.close()
            ret
        }
        def next():Array[Byte] = {
            dataBytes.next()
        }
    }
    val toEnumerate = new ClosableIterator()
    val dataContent:Enumerator[Array[Byte]] = Enumerator.enumerate(toEnumerate)
    Ok.stream(dataContent.andThen({Enumerator.eof}))
=======
  def download(q:String,r:String) = Action {
    val res = search.search(q)
    val (data,reader) = res.getFastaStream()
    val dataContent:Enumerator[Array[Byte]] = Enumerator.fromStream(data)
    Ok.stream(dataContent.andThen(reader.close()))
>>>>>>> 06e942816130c28bde09a101249b57e4350cea46
  }
  
  def summary(q:String) = Action {
    val res = search.search(q)
    val out = res.countOrgsJSON()
    Ok(out)
  }

}
